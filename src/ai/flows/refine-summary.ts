'use server';

/**
 * @fileOverview A flow for refining the summary of a document.
 *
 * - refineSummary - A function that handles the refinement of a document summary.
 * - RefineSummaryInput - The input type for the refineSummary function.
 * - RefineSummaryOutput - The return type for the refineSummary function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RefineSummaryInputSchema = z.object({
  originalText: z.string().describe('The original text content to summarize.'),
  initialSummary: z.string().describe('The initial summary generated by the AI.'),
  userFeedback: z.string().describe('User feedback on the initial summary.'),
  refinementInstructions: z
    .string()
    .describe('Specific instructions from the user on how to refine the summary.'),
});
export type RefineSummaryInput = z.infer<typeof RefineSummaryInputSchema>;

const RefineSummaryOutputSchema = z.object({
  refinedSummary: z.string().describe('The refined summary of the text content.'),
});
export type RefineSummaryOutput = z.infer<typeof RefineSummaryOutputSchema>;

export async function refineSummary(input: RefineSummaryInput): Promise<RefineSummaryOutput> {
  return refineSummaryFlow(input);
}

const prompt = ai.definePrompt({
  name: 'refineSummaryPrompt',
  input: {schema: RefineSummaryInputSchema},
  output: {schema: RefineSummaryOutputSchema},
  prompt: `Eres un asistente de IA que refina resúmenes basándose en los comentarios de los usuarios.

Texto Original: {{{originalText}}}

Resumen Inicial: {{{initialSummary}}}

Comentarios del Usuario: {{{userFeedback}}}

Instrucciones de Refinamiento: {{{refinementInstructions}}}

Basándote en el texto original, el resumen inicial, los comentarios del usuario y las instrucciones de refinamiento, genera un resumen refinado en español.
`,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const refineSummaryFlow = ai.defineFlow(
  {
    name: 'refineSummaryFlow',
    inputSchema: RefineSummaryInputSchema,
    outputSchema: RefineSummaryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
